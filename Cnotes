TO START CLIENT:
1. npm i react-route-dom => so you can npm start
2. npm start 
3. to install ui libraries => npm i 
 
App.js => where you design your website (like a plain architectural plan)
  -Purpose: It's like a blueprint for how your website should look and behave.
  -Content: It describes the main structure of your website using different components (like headers, buttons, or any custom parts).

index.js => puts that design on the actual webpage (like the final big boss that doesn't do anything but to put the blueprint(app.js) to the web page)
  -Purpose: It's the manager that takes the blueprint from App.js and puts it on the actual website.
  -Content: It says, "Hey, take this App blueprint and show it on the web page where it says 'root'."

element={<Register />} (inside in route in app.js)
- element here is known as prop. 
- element={<Register />} => when the URL path is "/register," the component to be rendered is the Register component. (render means to show)

import { useMutation, useQueryClient, useQuery } from "react-query"; 
- useMutation: => (to edit data in database from frontend)
  - Purpose: Handles mutations, which are operations that modify data, such as adding, updating, or deleting.
  - This hook is like a helper for making changes to your data on a server. For example, if you want to add, update, or delete something, you'd use this. It helps manage the process smoothly by handling loading, errors, and updating your app's data behind the scenes.

- useQueryClient => (manages all the data-fetching operations)
  - It serves as a central manager for handling queries in your React application. Think of it as the brains that coordinates and manages all the data-fetching operations. It's useful for scenarios where you need more control over when and how data is fetched or updated.
  - This hook gives you access to a manager (query client) that keeps track of your data. It's like the brain that remembers what data your app has fetched. With this hook, you can do things like manually refreshing data, telling the app when data is outdated, and other actions related to how your app deals with information.\

- useQuery => (fetch data from database via axios)

axios (makes HTTP requests and handle responses to/from database)
- Axios is a popular JavaScript library used for making HTTP requests from a web browser or a Node.js server. Its primary purpose is to simplify the process of sending asynchronous HTTP requests and handling responses.

export vs export default
- Use export when you want to export multiple values or functions from a module, and you'll import them using curly braces {}.
- Use export default when you want to export a single value or function as the main export of a module, and you'll import it with any name you like.

caching 
 - store previously fetched data in (Browser Cache, Server Cache, Client-Side Cache (React Query, for example) ) as temporary storage, to allow faster retrieval.

cache 
- a storage mechanism that holds temporary copies of data to serve future requests more quickly.